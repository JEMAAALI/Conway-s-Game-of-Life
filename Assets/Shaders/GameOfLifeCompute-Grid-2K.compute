// GameOfLifeCompute.compute
#pragma kernel CSMain

// Size of the grid
#define WIDTH 2560
#define HEIGHT 2560

 
 
Texture2D<float> CurrentState;// Single channel (R)

RWTexture2D<float> Result; // Use float since the texture now uses R8 format

[numthreads(1, 1, 1)] // This kernel will process 1 thread per dispatch (mouse click)
void AddCells(uint3 id : SV_DispatchThreadID, float2 position, int brushSize)
{
    int x = position.x;
    int y = position.y;

    for (int i = -brushSize; i <= brushSize; i++)
    {
        for (int j = -brushSize; j <= brushSize; j++)
        {
            int nx = clamp(x + i, 0, WIDTH - 1);
            int ny = clamp(y + j, 0, HEIGHT - 1);
            Result[int2(nx, ny)] = 1.0f; // Set alive
        }
    }
}

[numthreads(16, 16, 1)]

void CSMain(uint3 id : SV_DispatchThreadID)
{
    int x = id.x;
    int y = id.y;

    if (x >= WIDTH || y >= HEIGHT)
        return;

    // Get the current cell state (alive or dead)
    float currentCell = CurrentState[id.xy];
    int alive = (currentCell > 0.5) ? 1 : 0;

    // Count live neighbors (unchanged)
    int liveNeighbors = 0;
    for (int i = -1; i <= 1; ++i)
    {
        for (int j = -1; j <= 1; ++j)
        {
            if (i == 0 && j == 0)
                continue;

            int nx = (x + i + WIDTH) % WIDTH;
            int ny = (y + j + HEIGHT) % HEIGHT;

            float neighbor = CurrentState[int2(nx, ny)];
            liveNeighbors += (neighbor > 0.5) ? 1 : 0;
        }
    }

    // Apply the rules of the Game of Life
    float newState = 0.0f; // Dead by default
    if (alive == 1 && (liveNeighbors == 2 || liveNeighbors == 3))
    {
        newState = 1.0f; // Stay alive
    }
    else if (alive == 0 && liveNeighbors == 3)
    {
        newState = 1.0f; // Come to life
    }

    // Write the new state to the Result texture
    Result[id.xy] = newState;
}


#pragma kernel AddCells

RWTexture2D<float4> NextState;

int mouseX;
int mouseY;
int brushSize;

[numthreads(8, 8, 1)]
void AddCells(uint3 id : SV_DispatchThreadID)
{
    int x = id.x + mouseX - brushSize / 2;
    int y = id.y + mouseY - brushSize / 2;

    if (x >= 0 && x < WIDTH && y >= 0 && y < HEIGHT)
    {
        NextState[int2(x, y)] = float4(1, 1, 1, 1); // Set to alive (white)
    }
}